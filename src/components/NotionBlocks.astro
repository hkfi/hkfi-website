---
import type {
  CustomBlockObjectResponse,
  CustomTableBlockObjectResponse
} from '@/libs/notion/client'
import type {
  BlockObjectResponse,
  Heading1BlockObjectResponse,
  Heading2BlockObjectResponse,
  Heading3BlockObjectResponse
} from '@notionhq/client/build/src/api-endpoints'

import Paragraph from './blocks/Paragraph.astro'
import Heading1 from './blocks/Heading1.astro'
import Heading2 from './blocks/Heading2.astro'
import Heading3 from './blocks/Heading3.astro'
import TableOfContents from './blocks/TableOfContents.astro'
import Code from './blocks/Code.astro'
import Quote from './blocks/Quote.astro'
import Divider from './blocks/Divider.astro'
import Table from './blocks/Table.astro'
import BulletedListItems from './blocks/BulletedListItems.astro'

type HeadingBlockObjectResponse =
  | Heading1BlockObjectResponse
  | Heading2BlockObjectResponse
  | Heading3BlockObjectResponse

export type Props = {
  blocks: (BlockObjectResponse | CustomBlockObjectResponse)[]
  isRoot?: boolean
}

function isCustomTableBlockObjectResponse(
  block: BlockObjectResponse | CustomBlockObjectResponse
): block is CustomTableBlockObjectResponse {
  return block.type === 'table' && 'rows' in block.table
}

const { blocks, isRoot = false } = Astro.props

let headings: HeadingBlockObjectResponse[] = []
if (isRoot) {
  headings = blocks.filter((b) =>
    ['heading_1', 'heading_2', 'heading_3'].includes(b.type)
  ) as HeadingBlockObjectResponse[]
}
---

{
  blocks.map((block) => {
    switch (block.type) {
      case 'paragraph':
        return <Paragraph block={block} />
      case 'heading_1':
        return <Heading1 block={block} />
      case 'heading_2':
        return <Heading2 block={block} />
      case 'heading_3':
        return <Heading3 block={block} />
      case 'table_of_contents':
        return <TableOfContents block={block} headings={headings} />
      case 'code':
        return <Code block={block} />
      case 'quote':
        return <Quote block={block} />
      case 'bookmark':
      case 'divider':
        return <Divider />
      case 'table':
        return isCustomTableBlockObjectResponse(block) ? (
          <Table block={block} />
        ) : null
      case 'bulleted_list_item':
        return <BulletedListItems block={block} />
    }
  })
}
