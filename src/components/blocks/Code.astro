---
import Caption from './Caption.astro'
import type {
  CodeBlockObjectResponse,
  RichTextItemResponse,
  TextRichTextItemResponse
} from '@notionhq/client/build/src/api-endpoints'

import { codeToHtml } from 'shiki'
import { bundledLanguages, type BundledLanguage } from 'shiki/langs'

const VALID_LANGUAGES = Object.keys(bundledLanguages) as BundledLanguage[]

type ValidLanguage = (typeof VALID_LANGUAGES)[number]

function isValidLanguage(language: string): language is ValidLanguage {
  return VALID_LANGUAGES.includes(language as ValidLanguage)
}

export type Props = {
  block: CodeBlockObjectResponse
}

const { block } = Astro.props

function isTextRichTextItemResponse(
  richText: RichTextItemResponse
): richText is TextRichTextItemResponse {
  return 'text' in richText && 'content' in richText.text
}

const code = block.code.rich_text
  .map((richText) =>
    isTextRichTextItemResponse(richText) ? richText?.text?.content : ''
  )
  .join('')
const language = block.code.language.toLowerCase()

const htmlCode = await codeToHtml(code, {
  lang: language,
  themes: {
    light: 'rose-pine-dawn',
    dark: 'one-dark-pro'
  }
})
---

<div class='code'>
  {
    language === 'mermaid' ? (
      <pre set:html={htmlCode} />
    ) : (
      <pre class='text-sm'>
        {isValidLanguage(block.code.language) ? (
          <div set:html={htmlCode} />
        ) : null}
      </pre>
    )
  }
  <Caption richTexts={block.code.caption} />
</div>
