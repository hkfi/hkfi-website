---
import { Code as AstroCode } from 'astro/components'
import Caption from './Caption.astro'
import type {
  CodeBlockObjectResponse,
  RichTextItemResponse,
  TextRichTextItemResponse
} from '@notionhq/client/build/src/api-endpoints'

import { BUNDLED_LANGUAGES } from 'shiki'

const VALID_LANGUAGES = BUNDLED_LANGUAGES.flatMap(
  (language) => language.embeddedLangs ?? []
)

type ValidLanguage = (typeof VALID_LANGUAGES)[number]

function isValidLanguage(language: string): language is ValidLanguage {
  return VALID_LANGUAGES.includes(language as ValidLanguage)
}

export type Props = {
  block: CodeBlockObjectResponse
}

const { block } = Astro.props

function isTextRichTextItemResponse(
  richText: RichTextItemResponse
): richText is TextRichTextItemResponse {
  return 'text' in richText && 'content' in richText.text
}

const code = block.code.rich_text
  .map((richText) =>
    isTextRichTextItemResponse(richText) ? richText?.text?.content : ''
  )
  .join('')
const language = block.code.language.toLowerCase()
---

<div class='code'>
  {
    language === 'mermaid' ? (
      <pre class='mermaid'>{code}</pre>
    ) : (
      <pre class='text-sm'>
        {isValidLanguage(block.code.language) ? (
          <AstroCode
            wrap
            lang={block.code.language}
            code={code}
            theme='github-light'
          />
        ) : null}
      </pre>
    )
  }
  <Caption richTexts={block.code.caption} />
</div>
