---
import BlogTag from '@/components/BlogTag.astro'
import PostBody from '@/components/PostBody.astro'
import { buildHeadingId } from '@/libs/helpers/blog'
import {
  getAllPosts,
  getPostBySlug,
  getAllBlocksByBlockId
} from '@/libs/notion/client'
import type {
  Heading1BlockObjectResponse,
  Heading2BlockObjectResponse,
  Heading3BlockObjectResponse
} from '@notionhq/client/build/src/api-endpoints'
import Layout from 'src/layouts/Layout.astro'
import BurgerMenu from '@/components/icons/BurgerMenu.astro'
import Modal from '@/components/Modal.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()

  return posts.map((post) => {
    const properties = post.properties

    const slug =
      'rich_text' in properties.Slug
        ? properties.Slug.rich_text[0].plain_text
        : ''

    return {
      params: {
        slug
      }
    }
  })
}

const { slug } = Astro.params

if (!slug) {
  throw new Error('slug is required')
}

const post = await getPostBySlug(slug)

if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [blocks] = await Promise.all([getAllBlocksByBlockId(post.id)])

const title =
  'title' in post.properties.Title
    ? post.properties.Title.title[0].plain_text
    : ''

const tags =
  'multi_select' in post.properties.Tags
    ? post.properties.Tags.multi_select
    : []

const date =
  'date' in post.properties.Date ? post.properties.Date.date?.start : ''

type HeadingBlockObjectResponse =
  | Heading1BlockObjectResponse
  | Heading2BlockObjectResponse
  | Heading3BlockObjectResponse

const headingBlocks = blocks.filter((block) =>
  ['heading_1', 'heading_2', 'heading_3'].includes(block.type)
) as HeadingBlockObjectResponse[]
---

<Layout
  title={`${title} | hkfi`}
  seo={{
    description: `${title} | hkfi`
  }}
>
  <div class='flex w-full'>
    <!-- Tags in left section -->
    <div class='hidden min-w-40 flex-grow flex-col p-2 lg:flex'>
      <div id='post-info-section' class='fixed flex w-36 flex-col gap-2'>
        <div class='text-xl'>
          {date}
        </div>
        <div class='flex flex-wrap gap-2'>
          {tags.map((tag) => <BlogTag tag={tag} chosenTags={[]} />)}
        </div>
      </div>
    </div>
    <!-- Post content in the middle -->
    <div class='flex flex-grow flex-col'>
      <h1
        class='self-center text-3xl font-bold text-text'
        transition:name={`post-${post.id}`}
      >
        {title}
      </h1>
      <div class='flex justify-between p-2 lg:hidden'>
        <div class='text-xl'>
          {date}
        </div>
        <div class='flex gap-2'>
          {tags.map((tag) => <BlogTag tag={tag} chosenTags={[]} />)}
        </div>
      </div>
      <PostBody blocks={blocks} />
    </div>
    <!-- Table of contents in the right -->
    <div class='hidden min-w-40 flex-grow flex-col p-2 md:flex'>
      <div id='table-of-contents' class='fixed flex w-40 flex-grow flex-col'>
        {
          headingBlocks.map((headingBlock) => {
            const headingBlockType = headingBlock.type
            const headingString = buildHeadingId(headingBlock)
            const leftPaddingMap = {
              heading_1: 'pl-0',
              heading_2: 'pl-4',
              heading_3: 'pl-8'
            }

            return (
              <a
                href={`#${headingString}`}
                class={`${leftPaddingMap[headingBlockType]} 
                hover:text-primary hover:decoration-primary`}
              >
                {headingString}
              </a>
            )
          })
        }
      </div>
    </div>
  </div>

  <button
    id='show-table-of-contents-button'
    class='fixed bottom-0 right-10 z-30 flex h-16 w-16 -translate-y-10 items-center justify-center rounded-full bg-primary transition-all duration-200 ease-in-out hover:bg-secondary md:hidden'
    onclick='window.dialog.showModal()'
  >
    <BurgerMenu />
  </button>

  <Modal>
    <div
      slot='dialog-content'
      class='flex flex-col items-center rounded-md bg-background'
    >
      {
        headingBlocks.map((headingBlock) => {
          const headingBlockType = headingBlock.type
          const headingString = buildHeadingId(headingBlock)
          const leftPaddingMap = {
            heading_1: 'pl-0',
            heading_2: 'pl-4',
            heading_3: 'pl-8'
          }

          return (
            <a
              href={`#${headingString}`}
              class={`${leftPaddingMap[headingBlockType]} w-full text-center text-lg text-notion-default hover:text-primary hover:decoration-primary`}
            >
              {headingString}
            </a>
          )
        })
      }
    </div>
  </Modal>
</Layout>

<script>
  // Make the scroll to top button appear when the user scrolls up
  window.addEventListener('wheel', (e) => {
    const scrollDirection = e.deltaY < 1 ? 1 : e.deltaY > 1 ? -1 : 0

    const tableOfContents = document.getElementById('table-of-contents')
    const postInfoSection = document.getElementById('post-info-section')

    const showTableOfContentsButton = document.getElementById(
      'show-table-of-contents-button'
    )

    if (scrollDirection === 1 && window.scrollY > 0) {
      tableOfContents?.classList.add('visible', 'opacity-100')
      tableOfContents?.classList.remove('invisible', 'opacity-0')
      postInfoSection?.classList.add('visible', 'opacity-100')
      postInfoSection?.classList.remove('invisible', 'opacity-0')
      showTableOfContentsButton?.classList.add('visible', 'opacity-100')
      showTableOfContentsButton?.classList.remove('invisible', 'opacity-0')
    } else if (scrollDirection === -1) {
      tableOfContents?.classList.add('invisible', 'opacity-0')
      tableOfContents?.classList.remove('visible', 'opacity-100')
      postInfoSection?.classList.add('invisible', 'opacity-0')
      postInfoSection?.classList.remove('visible', 'opacity-100')
      showTableOfContentsButton?.classList.add('invisible', 'opacity-0')
      showTableOfContentsButton?.classList.remove('visible', 'opacity-100')
    }
  })
</script>
